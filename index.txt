const express = require('express')
const cookieParser = require("cookie-parser");
const app = express()
const port = process.env.PORT || 3000;
const jwt = require("jsonwebtoken");

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());


const swaggerUi = require ("swagger-ui-express");
const swaggerJsdoc = require("swagger-jsdoc");
const options = {
    definition: {
        openapi: "3.0.0",
        info: {
            title: "MyVMS API",
            version: "1.0.0",
        },
    },
    apis: ["./index.js"],
};
const swaggerSpec = swaggerJsdoc (options);
app.use("/api-docs", swaggerUi.serve,swaggerUi.setup(swaggerSpec));

app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
 })


const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://sirohm55:JUNyantan15243@vms.vbsh1ml.mongodb.net/?retryWrites=true&w=majority";

const client = new MongoClient(uri, {
    serverApi: {
      version: ServerApiVersion.v1,
      strict: true,
      deprecationErrors: true,
    }
  });

//global variables
var l = "false";
var jwt_token;   
var host;
var role;


function create_jwt (payload){
    jwt_token = jwt.sign(payload, 'hello_goh', { expiresIn: "10m" });
    return 
}


async function login(Username,Password){  //user and host login

    const option={projection:{password:0}}  //pipeline to project usernamne and email

    const result = await client.db("user").collection("visitor").findOne({  
        $and:[
            {username:{$eq:Username}},
            {password:{$eq:Password}}
            ]
    },option)

    await client.db("user").collection("visitor").updateOne({  
        username:Username
    },
    {
        $currentDate: {
        "lastCheckinTime": true
     },
    })

    if(result){
        visitor = result.username
        console.log(result)
        console.log("Successfully Login")
        l = "true"
        role = "visitor"
        create_jwt ({username: result.username, email: result.email, role: result.role})
        return result
        //details(result.role)
    }
    else {
        const option={projection:{password:0}}  //pipeline to project usernamne and email

        const result = await client.db("user").collection("host").findOne({
            $and:[
                {username:{$eq:Username}},
                {password:{$eq:Password}}
                ]
        },option)

        if(result){
            host = result.username
            console.log(result)
            console.log("Successfully Login")
            l = "true"
            role = "host"
            create_jwt ({username: result.username, email: result.email, role: result.role})
            return result
            //details(result.role)
            
        }
        else {
            const option={projection:{password:0}}  //pipeline to project usernamne and email

            const result = await client.db("user").collection("security").findOne({
                $and:[
                    {username:{$eq:Username}},
                    {password:{$eq:Password}}
                    ]
            },option)

            if(result){
                console.log(result)
                console.log("Successfully Login")
                l = "true"
                role = "security"
                create_jwt ({username: result.username, email: result.email, role: result.role})
                return result
                //details(result.role)
                
            }
            else{
                return "User not found or password error"
            }
        } 
    }
}
//HTTP login method
app.post('/login', async(req, res) => {   //login
    if(l == "false"){
        let answer = await login(req.body.username,req.body.password);
        res.cookie("sessid", jwt_token, {
            httpOnly: true,
        });
        res.status(200).send(answer)
    }
    else{
        res.status(200).send("you had logged in")
    }
})

app.get('/login/security/logout', verifyToken, (req, res) => {
        console.log ("logout")
        res.clearCookie("sessid").send("You had log out")
})

app.get('/', (req, res) => {
    console.log("check2")
    res.redirect ("/api-docs");
 })

/*function verifyToken (req, res, next){
    const token = req.cookies.sessid;
    if (!token){
        console.log("no token")
        return next()
    }
        
    const user = jwt.verify (token, 'hello_goh', (err,user) => {
        if (err){
            console.log ("Invalid token")
            next()
        }
        console.log ("checkpoint")
        req.user = user;
        role = user.role;
        console.log(user)
        return next()
    });
}*/
